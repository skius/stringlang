// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/skius/stringlang/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : FuncDecls	<< ast.NewProgram(X[0], ast.Block([]ast.Expr{})) >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewProgram(X[0], ast.Block([]ast.Expr{}))
		},
	},
	ProdTabEntry{
		String: `Program : FuncDecls Block	<< ast.NewProgram(X[0], X[1]) >>`,
		Id:         "Program",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewProgram(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `FuncDecls : FuncDecls FuncDecl	<< ast.FuncDeclsAppend(X[1], X[0]) >>`,
		Id:         "FuncDecls",
		NTType:     2,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.FuncDeclsAppend(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `FuncDecls : empty	<< []ast.FuncDecl{}, nil >>`,
		Id:         "FuncDecls",
		NTType:     2,
		Index:      4,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []ast.FuncDecl{}, nil
		},
	},
	ProdTabEntry{
		String: `FuncDecl : "fun" id "(" FuncParams ")" "{" Block "}"	<< ast.NewFuncDecl(X[1], X[3], X[6]) >>`,
		Id:         "FuncDecl",
		NTType:     3,
		Index:      5,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFuncDecl(X[1], X[3], X[6])
		},
	},
	ProdTabEntry{
		String: `FuncParams : id FuncParamsHelper	<< ast.FuncParamsPrepend(X[0], X[1]) >>`,
		Id:         "FuncParams",
		NTType:     4,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.FuncParamsPrepend(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `FuncParams : empty	<< []string{}, nil >>`,
		Id:         "FuncParams",
		NTType:     4,
		Index:      7,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []string{}, nil
		},
	},
	ProdTabEntry{
		String: `FuncParamsHelper : "," id FuncParamsHelper	<< ast.FuncParamsPrepend(X[1], X[2]) >>`,
		Id:         "FuncParamsHelper",
		NTType:     5,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.FuncParamsPrepend(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `FuncParamsHelper : empty	<< []string{}, nil >>`,
		Id:         "FuncParamsHelper",
		NTType:     5,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []string{}, nil
		},
	},
	ProdTabEntry{
		String: `Block : Expr BlockHelper	<< ast.BlockPrepend(X[0], X[1]) >>`,
		Id:         "Block",
		NTType:     6,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.BlockPrepend(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `BlockHelper : ";" Expr BlockHelper	<< ast.BlockPrepend(X[1], X[2]) >>`,
		Id:         "BlockHelper",
		NTType:     7,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.BlockPrepend(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `BlockHelper : empty	<< ast.NewBlock() >>`,
		Id:         "BlockHelper",
		NTType:     7,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBlock()
		},
	},
	ProdTabEntry{
		String: `Expr : Var "=" Expr	<< ast.NewAssn(X[0], X[2]) >>`,
		Id:         "Expr",
		NTType:     8,
		Index:      13,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAssn(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : ExprOr	<< X[0], nil >>`,
		Id:         "Expr",
		NTType:     8,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprOr : ExprOr "||" ExprAnd	<< ast.NewOr(X[0], X[2]) >>`,
		Id:         "ExprOr",
		NTType:     9,
		Index:      15,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewOr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprOr : ExprAnd	<< X[0], nil >>`,
		Id:         "ExprOr",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprAnd : ExprAnd "&&" ExprNotEquals	<< ast.NewAnd(X[0], X[2]) >>`,
		Id:         "ExprAnd",
		NTType:     10,
		Index:      17,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAnd(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprAnd : ExprNotEquals	<< X[0], nil >>`,
		Id:         "ExprAnd",
		NTType:     10,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprNotEquals : ExprNotEquals "!=" ExprEquals	<< ast.NewNotEquals(X[0], X[2]) >>`,
		Id:         "ExprNotEquals",
		NTType:     11,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNotEquals(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprNotEquals : ExprEquals	<< X[0], nil >>`,
		Id:         "ExprNotEquals",
		NTType:     11,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprEquals : ExprEquals "==" ExprConcat	<< ast.NewEquals(X[0], X[2]) >>`,
		Id:         "ExprEquals",
		NTType:     12,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEquals(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprEquals : ExprConcat	<< X[0], nil >>`,
		Id:         "ExprEquals",
		NTType:     12,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprConcat : ExprConcat "+" ExprLeaf	<< ast.NewConcat(X[0], X[2]) >>`,
		Id:         "ExprConcat",
		NTType:     13,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConcat(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprConcat : ExprLeaf	<< X[0], nil >>`,
		Id:         "ExprConcat",
		NTType:     13,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : IfElse	<< X[0], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : While	<< X[0], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : string_lit	<< ast.NewVal(X[0]) >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVal(X[0])
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : Arg	<< X[0], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : Var	<< X[0], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : Var "(" CallArgs ")"	<< ast.NewCall(X[0], X[2]) >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      30,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCall(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : "(" Expr ")"	<< X[1], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ExprLeaf : Index	<< X[0], nil >>`,
		Id:         "ExprLeaf",
		NTType:     14,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Index : ExprLeaf "[" Expr "]"	<< ast.NewIndex(X[0], X[2]) >>`,
		Id:         "Index",
		NTType:     15,
		Index:      33,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIndex(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Index : ExprLeaf "[" int_lit "]"	<< ast.NewIndexInt(X[0], X[2]) >>`,
		Id:         "Index",
		NTType:     15,
		Index:      34,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIndexInt(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `CallArgs : Expr CallArgsHelper	<< ast.CallArgsPrepend(X[0], X[1]) >>`,
		Id:         "CallArgs",
		NTType:     16,
		Index:      35,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.CallArgsPrepend(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `CallArgs : empty	<< ast.NewCallArgs() >>`,
		Id:         "CallArgs",
		NTType:     16,
		Index:      36,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCallArgs()
		},
	},
	ProdTabEntry{
		String: `CallArgsHelper : "," Expr CallArgsHelper	<< ast.CallArgsPrepend(X[1], X[2]) >>`,
		Id:         "CallArgsHelper",
		NTType:     17,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.CallArgsPrepend(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `CallArgsHelper : empty	<< ast.NewCallArgs() >>`,
		Id:         "CallArgsHelper",
		NTType:     17,
		Index:      38,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCallArgs()
		},
	},
	ProdTabEntry{
		String: `Arg : "%!"(MISSING) int_lit	<< ast.NewArg(X[1]) >>`,
		Id:         "Arg",
		NTType:     18,
		Index:      39,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArg(X[1])
		},
	},
	ProdTabEntry{
		String: `Var : id	<< ast.NewVar(X[0]) >>`,
		Id:         "Var",
		NTType:     19,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVar(X[0])
		},
	},
	ProdTabEntry{
		String: `IfElse : "if" "(" Expr ")" "{" Block "}" "else" "{" Block "}"	<< ast.NewIfElse(X[2], X[5], X[9]) >>`,
		Id:         "IfElse",
		NTType:     20,
		Index:      41,
		NumSymbols: 11,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIfElse(X[2], X[5], X[9])
		},
	},
	ProdTabEntry{
		String: `IfElse : "if" "(" Expr ")" "{" Block "}" "else" IfElse	<< ast.NewIfElse(X[2], X[5], X[8]) >>`,
		Id:         "IfElse",
		NTType:     20,
		Index:      42,
		NumSymbols: 9,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIfElse(X[2], X[5], X[8])
		},
	},
	ProdTabEntry{
		String: `While : "while" "(" Expr ")" "{" Block "}"	<< ast.NewWhile(X[2], X[5]) >>`,
		Id:         "While",
		NTType:     21,
		Index:      43,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewWhile(X[2], X[5])
		},
	},
}
